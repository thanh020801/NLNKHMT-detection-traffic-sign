# # YOLOv5 üöÄ by Ultralytics, GPL-3.0 license
# # COCO128 dataset https://www.kaggle.com/ultralytics/coco128 (first 128 images from COCO train2017) by Ultralytics
# # Example usage: python train.py --data coco128.yaml
# # parent
# # ‚îú‚îÄ‚îÄ yolov5
# # ‚îî‚îÄ‚îÄ datasets
# #     ‚îî‚îÄ‚îÄ coco128  ‚Üê downloads here (7 MB)


# # Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]
# path: E:/dataset/  # dataset root dir
# train: images/train  # train images (relative to 'path') 128 images
# val: images/val  # val images (relative to 'path') 128 images
# test:  # test images (optional)

# nc: 11
# # Classes
# names:
#   0: CHO
#   1: GIOI H·∫†N TOC DO TOI DA 50km/h
#   2: GIOI H·∫†N TOC DO TOI DA 60km/h
#   3: HET HAN GIOI HAN TOC DO TOI DA 40km/h
#   4: HET HAN GIOI HAN TOC DO TOI DA 50km/h
#   5: HET HAN GIOI HAN TOC DO TOI DA
#   6: VAO KHU DAN CU
#   7: RA KHU DAN CU
#   8: CAM CHAY NGUOC CHIEU
#   9: DUNG LAI QUAN SAT
#   10: CHO PHU
#   # 0: person
#   # 1: bicycle
#   # 2: car
#   # 3: motorcycle
#   # 4: airplane
#   # 5: bus
#   # 6: train
#   # 7: truck
#   # 8: boat
#   # 9: traffic light
#   # 10: fire hydrant
#   # 11: stop sign
#   # 12: parking meter
#   # 13: bench
#   # 14: bird
#   # 15: cat
#   # 16: dog
#   # 17: horse
#   # 18: sheep
#   # 19: cow
#   # 20: elephant
#   # 21: bear
#   # 22: zebra
#   # 23: giraffe
#   # 24: backpack
#   # 25: umbrella
#   # 26: handbag
#   # 27: tie
#   # 28: suitcase
#   # 29: frisbee
#   # 30: skis
#   # 31: snowboard
#   # 32: sports ball
#   # 33: kite
#   # 34: baseball bat
#   # 35: baseball glove
#   # 36: skateboard
#   # 37: surfboard
#   # 38: tennis racket
#   # 39: bottle
#   # 40: wine glass
#   # 41: cup
#   # 42: fork
#   # 43: knife
#   # 44: spoon
#   # 45: bowl
#   # 46: banana
#   # 47: apple
#   # 48: sandwich
#   # 49: orange
#   # 50: broccoli
#   # 51: carrot
#   # 52: hot dog
#   # 53: pizza
#   # 54: donut
#   # 55: cake
#   # 56: chair
#   # 57: couch
#   # 58: potted plant
#   # 59: bed
#   # 60: dining table
#   # 61: toilet
#   # 62: tv
#   # 63: laptop
#   # 64: mouse
#   # 65: remote
#   # 66: keyboard
#   # 67: cell phone
#   # 68: microwave
#   # 69: oven
#   # 70: toaster
#   # 71: sink
#   # 72: refrigerator
#   # 73: book
#   # 74: clock
#   # 75: vase
#   # 76: scissors
#   # 77: teddy bear
#   # 78: hair drier
#   # 79: toothbrush


# # Download script/URL (optional)
# # download: https://ultralytics.com/assets/coco128.zip


# train_params:
#   batch_size: 16  # Batch size for training
#   epochs: 10  # Number of training epochs
#   lr: 0.001  # Learning rate







# # Model architecture
# backbone:
#   # The backbone consists of a series of Conv2d, Bottleneck, and SPP blocks.
#   - [convolutional, 32, 3, 1]
#   - [convolutional, 64, 3, 2]
#   - [bottleneck, 64]
#   - [convolutional, 128, 3, 2]
#   - [bottleneck, 128]
#   - [bottleneck, 128]
#   - [convolutional, 256, 3, 2]
#   - [bottleneck, 256]
#   - [bottleneck, 256]
#   - [bottleneck, 256]
#   - [bottleneck, 256]
#   - [bottleneck, 256]
#   - [bottleneck, 256]
#   - [spp]
#   - [bottleneck, 256]
#   - [bottleneck, 256]


# head:
#   # The head consists of a series of Conv2d and YOLO layers.
#   # The YOLO layers detect objects at three different scales.
#   - [convolutional, 512, 3, 1]
#   - [convolutional, 256, 1, 1]
#   - [yolo, 3, [13, 26, 52]]

# # Input image size
# img_size: 500

# YOLOv8n model configuration file

# Number of classes
nc: 1
names:
  0: Co bien bao
# Model architecture
backbone:
  # The backbone consists of a series of Conv2d, Bottleneck, and SPP blocks.
  - [convolutional, 32, 3, 1]
  - [convolutional, 64, 3, 2]
  - [bottleneck, 64]
  - [convolutional, 128, 3, 2]
  - [bottleneck, 128]
  - [bottleneck, 128]
  - [convolutional, 256, 3, 2]
  - [bottleneck, 256]
  - [bottleneck, 256]
  - [bottleneck, 256]
  - [bottleneck, 256]
  - [bottleneck, 256]
  - [bottleneck, 256]
  - [spp]
  - [bottleneck, 256]
  - [bottleneck, 256]

head:
  # The head consists of a series of Conv2d and YOLO layers.
  # The YOLO layers detect objects at three different scales.
  - [convolutional, 512, 3, 1]
  - [convolutional, 256, 1, 1]
  - [yolo, 3, [13, 26, 52]]

# Input image size
img_size: 500

# Anchor boxes for the YOLO layers
anchors:
  - [10,13, 16,30, 33,23]
  - [30,61, 62,45, 59,119]
  - [116,90, 156,198, 373,326]

# Training hyperparameters
train:
  # Number of epochs to train for
  epochs: 20

  # Batch size for training
  batch_size: 16

  # Learning rate for the optimizer
  lr: 0.001

  # Momentum for the optimizer
  momentum: 0.9

  # Weight decay for the optimizer
  weight_decay: 0.0005


# Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]
path: "E:/full_size_data_1_class"  # dataset root dir
train: images/train  # train images (relative to 'path') 128 images
val: images/val  # val images (relative to 'path') 128 images
# test:  # test images (optional)